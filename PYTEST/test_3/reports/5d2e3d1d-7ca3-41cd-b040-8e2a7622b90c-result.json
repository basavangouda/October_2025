{"name": "test_login_with_invalid_credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=141.0.7390.123); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7a333e8e5+80021]\n\tGetHandleVerifier [0x0x7ff7a333e940+80112]\n\t(No symbol) [0x0x7ff7a30c060f]\n\t(No symbol) [0x0x7ff7a30d6e35]\n\t(No symbol) [0x0x7ff7a30d5923]\n\t(No symbol) [0x0x7ff7a30c8ea7]\n\t(No symbol) [0x0x7ff7a30c6d80]\n\t(No symbol) [0x0x7ff7a30cb26f]\n\t(No symbol) [0x0x7ff7a30cb32f]\n\t(No symbol) [0x0x7ff7a3112286]\n\t(No symbol) [0x0x7ff7a314122a]\n\t(No symbol) [0x0x7ff7a310b056]\n\t(No symbol) [0x0x7ff7a3141440]\n\t(No symbol) [0x0x7ff7a316968a]\n\t(No symbol) [0x0x7ff7a3141003]\n\t(No symbol) [0x0x7ff7a31095d1]\n\t(No symbol) [0x0x7ff7a310a3f3]\n\tGetHandleVerifier [0x0x7ff7a35fdc7d+2960429]\n\tGetHandleVerifier [0x0x7ff7a35f7f3a+2936554]\n\tGetHandleVerifier [0x0x7ff7a3618977+3070247]\n\tGetHandleVerifier [0x0x7ff7a33583ce+185214]\n\tGetHandleVerifier [0x0x7ff7a335fe1f+216527]\n\tGetHandleVerifier [0x0x7ff7a3347b24+117460]\n\tGetHandleVerifier [0x0x7ff7a3347cdf+117903]\n\tGetHandleVerifier [0x0x7ff7a332dbb8+11112]\n\tBaseThreadInitThunk [0x0x7ff819fa7374+20]\n\tRtlUserThreadStart [0x0x7ff81be7cc91+33]", "trace": "self = <PYTEST.test_3.test_login.TestLogin object at 0x000001A55E7DA490>\n\n    @allure.severity(allure.severity_level.BLOCKER)\n    def test_login_with_invalid_credentials(self):\n        self.driver.find_element(By.XPATH, \"//a[@title='My Account']\").click()\n        self.driver.find_element(By.LINK_TEXT, \"Login\").click()\n        self.driver.find_element(By.ID, \"input-email\").send_keys(\"\")\n        self.driver.find_element(By.ID, \"input-password\").send_keys(\"\")\n        self.driver.find_element(By.XPATH, \"//input[@value='Login']\").click()\n    \n        expected_warning_message = \"Warning: No match for E-Mail Address and/or Password.ABC\"\n        # Now error message having not only text include, I tags so i will check contains\n    \n    \n>       assert self.driver.find_element(By.XPATH, \"//div[@id='account-login']/div[1]\").text.__contains__(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            expected_warning_message)\n\ntest_login.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:110: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A55E7DBC50>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff7a332dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff819fa7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff81be7cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=141.0.7390.123); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#staleelementreferenceexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7a333e8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff7a333e940+80112]\nE       \t(No symbol) [0x0x7ff7a30c060f]\nE       \t(No symbol) [0x0x7ff7a30d6e35]\nE       \t(No symbol) [0x0x7ff7a30d5923]\nE       \t(No symbol) [0x0x7ff7a30c8ea7]\nE       \t(No symbol) [0x0x7ff7a30c6d80]\nE       \t(No symbol) [0x0x7ff7a30cb26f]\nE       \t(No symbol) [0x0x7ff7a30cb32f]\nE       \t(No symbol) [0x0x7ff7a3112286]\nE       \t(No symbol) [0x0x7ff7a314122a]\nE       \t(No symbol) [0x0x7ff7a310b056]\nE       \t(No symbol) [0x0x7ff7a3141440]\nE       \t(No symbol) [0x0x7ff7a316968a]\nE       \t(No symbol) [0x0x7ff7a3141003]\nE       \t(No symbol) [0x0x7ff7a31095d1]\nE       \t(No symbol) [0x0x7ff7a310a3f3]\nE       \tGetHandleVerifier [0x0x7ff7a35fdc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff7a35f7f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff7a3618977+3070247]\nE       \tGetHandleVerifier [0x0x7ff7a33583ce+185214]\nE       \tGetHandleVerifier [0x0x7ff7a335fe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff7a3347b24+117460]\nE       \tGetHandleVerifier [0x0x7ff7a3347cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff7a332dbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ff819fa7374+20]\nE       \tRtlUserThreadStart [0x0x7ff81be7cc91+33]\n\n..\\..\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "start": 1761483347656, "stop": 1761483349113, "uuid": "87ac7f04-cc93-473a-9668-e8911515cb0c", "historyId": "053d68a8a3c7e7c127b66b08a447a3ee", "testCaseId": "053d68a8a3c7e7c127b66b08a447a3ee", "fullName": "test_login.TestLogin#test_login_with_invalid_credentials", "labels": [{"name": "severity", "value": "blocker"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-4222FVV"}, {"name": "thread", "value": "17644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}], "titlePath": ["test_login.py", "TestLogin"]}